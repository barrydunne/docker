name: Build

on: [push]

jobs:
  build-and-test:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      statuses: write

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Build
      shell: pwsh
      run: |
        dotnet build -c Release ./Microservices.SharedLibraries/Microservices.SharedLibraries.sln

        $workspace = $env:GITHUB_WORKSPACE
        $packages = Join-Path -Path $workspace -ChildPath Microservices.SharedLibraries/Packages
        dotnet nuget add source $packages -n Microservices.SharedLibraries

        dotnet build -c Release ./Infrastructure/IdentityServer/IdentityServer.sln
        dotnet build -c Release ./Infrastructure/SecretsManager/SecretsManager.sln
        dotnet build -c Release ./PublicApi/PublicApi/PublicApi.sln
        dotnet build -c Release ./State/State/State.sln
        dotnet build -c Release ./Geocoding/Geocoding/Geocoding.sln
        dotnet build -c Release ./Directions/Directions/Directions.sln
        dotnet build -c Release ./Weather/Weather/Weather.sln
        dotnet build -c Release ./Imaging/Imaging/Imaging.sln
        dotnet build -c Release ./Email/Email/Email.sln
        dotnet build -c Release ./Client/Client.sln

    - name: Test SharedLibraries
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./Microservices.SharedLibraries/Microservices.Shared.CloudEmail.Smtp.UnitTests/Microservices.Shared.CloudEmail.Smtp.UnitTests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/ce.u.xml" /p:Include=[Microservices.Shared.CloudEmail.Smtp]* /p:Threshold=100
        dotnet test ./Microservices.SharedLibraries/Microservices.Shared.CloudFiles.Ftp.UnitTests/Microservices.Shared.CloudFiles.Ftp.UnitTests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/cf.u.xml" /p:Include=[Microservices.Shared.CloudFiles.Ftp]* /p:Threshold=100
        dotnet test ./Microservices.SharedLibraries/Microservices.Shared.CloudSecrets.SecretsManager.UnitTests/Microservices.Shared.CloudSecrets.SecretsManager.UnitTests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/cs.u.xml" /p:Include=[Microservices.Shared.CloudSecrets.SecretsManager]* /p:Threshold=100
        dotnet test ./Microservices.SharedLibraries/Microservices.Shared.Queues.RabbitMQ.UnitTests/Microservices.Shared.Queues.RabbitMQ.UnitTests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/mq.u.xml" /p:Include=[Microservices.Shared.Queues.RabbitMQ]* /p:Threshold=100

    - name: Test SecretsManager
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./Infrastructure/SecretsManager/SecretsManager.Application.Tests/SecretsManager.Application.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/sm.a.xml" /p:Include=[SecretsManager.Application]* /p:Threshold=100

    - name: Test PublicApi
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./PublicApi/PublicApi/PublicApi.Application.Tests/PublicApi.Application.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/p.a.xml" /p:Include=[PublicApi.Application]* /p:Threshold=100

    - name: Test State
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./State/State/State.Application.Tests/State.Application.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/s.a.xml" /p:Include=[State.Application]* /p:Threshold=100

    - name: Test Geocoding
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./Geocoding/Geocoding/Geocoding.Application.Tests/Geocoding.Application.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/g.a.xml" /p:Include=[Geocoding.Application]* /p:Exclude=[*]*.MapQuestModels.* /p:Threshold=100
        dotnet test ./Geocoding/Geocoding/Geocoding.Infrastructure.Tests/Geocoding.Infrastructure.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/g.e.xml" /p:Include=[Geocoding.Infrastructure]* /p:Exclude=[*]*.MapQuestModels.* /p:Threshold=100

    - name: Test Directions
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./Directions/Directions/Directions.Application.Tests/Directions.Application.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/d.a.xml" /p:Include=[Directions.Application]* /p:Exclude=[*]*.MapQuestModels.* /p:Threshold=100
        dotnet test ./Directions/Directions/Directions.Infrastructure.Tests/Directions.Infrastructure.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/d.e.xml" /p:Include=[Directions.Infrastructure]* /p:Exclude=[*]*.MapQuestModels.* /p:Threshold=100

    - name: Test Weather
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./Weather/Weather/Weather.Application.Tests/Weather.Application.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/w.a.xml" /p:Include=[Weather.Application]* /p:Threshold=100
        dotnet test ./Weather/Weather/Weather.Infrastructure.Tests/Weather.Infrastructure.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/w.e.xml" /p:Include=[Weather.Infrastructure]* /p:Threshold=100

    - name: Test Imaging
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./Imaging/Imaging/Imaging.Application.Tests/Imaging.Application.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/i.a.xml" /p:Include=[Imaging.Application]* /p:Exclude=[*]*.BingModels.* /p:Threshold=100
        dotnet test ./Imaging/Imaging/Imaging.Infrastructure.Tests/Imaging.Infrastructure.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/i.e.xml" /p:Include=[Imaging.Infrastructure]* /p:Exclude=[*]*.BingModels.* /p:Threshold=100

    - name: Test Email
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        dotnet test ./Email/Email/Email.Application.Tests/Email.Application.Tests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/e.a.xml" /p:Include=[Email.Application]* /p:Threshold=100
        dotnet test ./Email/Email/Email.Infrastructure.UnitTests/Email.Infrastructure.UnitTests.csproj -c Release --no-build --framework net8.0 -l "console;verbosity=normal" --results-directory:"$workspace/TestResults" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$workspace/TestResults/e.ru.xml" /p:Include=[Email.Infrastructure]* /p:Threshold=100

    - name: Report Generator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
      with:
        reports: TestResults/ce.u.xml;TestResults/cf.u.xml;TestResults/cs.u.xml;TestResults/cs.i.xml;TestResults/mq.u.xml;TestResults/sm.a.xml;TestResults/p.a.xml;TestResults/s.a.xml;TestResults/g.a.xml;TestResults/g.e.xml;TestResults/d.a.xml;TestResults/d.e.xml;TestResults/w.a.xml;TestResults/w.e.xml;TestResults/i.a.xml;TestResults/e.a.xml;TestResults/e.ru.xml
        targetdir: TestResults/CoverageReport
        reporttypes: TextSummary

    - name: Output Coverage Report
      shell: pwsh
      run:  |
        $workspace = $env:GITHUB_WORKSPACE
        $report = Get-Content "$workspace/TestResults/CoverageReport/Summary.txt" -Raw
        Write-Host $report
